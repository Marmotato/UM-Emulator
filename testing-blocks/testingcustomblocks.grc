options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: testingcustomblocks
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: samp_rate_0
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 164.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: '1000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 100.0]
    rotation: 0
    state: true
- name: analog_sig_source_x_1
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: '3000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_SIN_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 332.0]
    rotation: 0
    state: true
- name: emu_vars
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "import numpy as np\n\n# posici\xF3n Ti\nx_i = 3\ny_i = 0.5\nz_i\
      \ = 4.5\n\n# posici\xF3n Rj1    \nx_j = 3\ny_j = 1\nz_j = 1.8\n\n# posici\xF3\
      n del Rj2     \nx_j2 = 3\ny_j2 = 1.5\nz_j2 = 1.8\n\n# posici\xF3n del Rj3  \
      \  \nx_j3 = 4\ny_j3 = 2\nz_j3 = 1.8\n\n# posici\xF3n del Rj4    \nx_j4 = 2.2\n\
      y_j4 = 2.5\nz_j4 = 1.8\n\n# posici\xF3n del Rj5    \nx_j5 = 1\ny_j5 = 2.5\n\
      z_j5 = 1.6\n\n# posici\xF3n del \xE1rea reflectiva (pared) usar para puntos\
      \ espec\xEDficos de elementos reflectantes\n\n# first reflection_point \nx_w1\
      \ = 2\ny_w1 = 2\nz_w1 = 3\n\n# second reflection_point\nx_w2 = 1.5\ny_w2 = 2.3\n\
      z_w2 = 4.0\n\n# third reflection_point\nx_w = 5\ny_w = 2.9\nz_w = 3.5\n\n# position\
      \ of scattering particle\n# x_s = 4\n# y_s = 4.5\n# z_s = 2.5\n\n# par\xE1metros\
      \ de la simulaci\xF3n\n\nAw = 1                                        # \xE1\
      rea del elemento reflectante\npw = 0.6                                     \
      \ # coeficiente de reflexi\xF3n del \xE1rea reflectiva\nang_rad = 60       \
      \                           # semi-\xE1ngulo de mitad de potencia del LED\n\
      m = int(-np.log(2) / np.log(abs(np.cos(ang_rad * np.pi / 180))));   # n\xFA\
      mero Lambertiano\nAp = 0.0001                                   # \xE1rea f\xED\
      sica del receptor (1 cm^2)\neta = 1.5                                     #\
      \ \xEDndice de refracci\xF3n del PD\nfov = 70                              \
      \        # field of view\n\n# par\xE1metros de los \xE1ngulos de inclinaci\xF3\
      n y rotaci\xF3n\n\nbeta_i = 45                                   # \xE1ngulo\
      \ de inclinaci\xF3n del LED con respecto al eje z\nalpha_i = 45            \
      \                      # \xE1ngulo de rotaci\xF3n del LED con respecto al eje\
      \ x\n\nbeta_j = 45                                   # \xE1ngulo de inclinaci\xF3\
      n del PD con respecto al eje z\nalpha_j = 45                               \
      \   # \xE1ngulo de rotaci\xF3n del PD con respecto al eje x\n\n# wall rotation\
      \ angles para \xE1ngulo espec\xEDfico                   \nalpha_w = 20\nbeta_w\
      \ = 70\n\ngv = [20, 60]                                 # distribuci\xF3n uniforme\
      \ de probabilidad  \nfv = [0, 5]                                   # distribuci\xF3\
      n uniforme de probabilidad   \nW = 6                                       \
      \  # ancho del obst\xE1culo\nH = 5                                         #\
      \ altura del obst\xE1culo\nX = 6                                         # Longitud\
      \ de la mina\nY = 3                                         # altura de la mina\n\
      es = 5                                        # epsilon \nt = 5 * 10**-9   \
      \                             # valor del tiempo\ngymma = 0.017            \
      \                     # coeficiente de reflexi\xF3n\ng = 0.72              \
      \                        # responsividad\nf = 0.5                          \
      \             # \xEDndice de refracci\xF3n\nkr = [0.1, 0.01]               \
      \               # distribuci\xF3n uniforme de probabilidad\nkm = [0, 10]   \
      \                               # distribuci\xF3n uniforme de probabilidad\n\
      ks = np.add(kr, km)                           # distribuci\xF3n uniforme de\
      \ probabilidad\nN = 70                                        # N\xFAmero de\
      \ scatterers\n# rn=sqrt((x_j-x_s)^2+(y_j-y_s)^2+(z_j-z_s)^2);\np = 0.1     \
      \                                  # el par\xE1metro se utiliza en el c\xE1\
      lculo de Gn debajo de la ecuaci\xF3n 3.21 \n\nc = 3 * 10**8                \
      \                 # velocidad de la luz\n\nSampling_time = 0.25e-9         \
      \              # 0.25 nano segundos de muestreo, se disminuye para mayor n\xFA\
      mero de muestras\ntime = np.arange(0, 35e-9, Sampling_time)    # vector de tiempo\
      \ donde se observar\xE1 el CIR\ntime = np.round(time, 12)                  \
      \       # redondeo del tiempo \nt_rise = 0.5e-9                            \
      \   # subida del tiempo de subida del PD\nt_fall = 1e-9                    \
      \             # tiempo de ca\xEDda del PD\nh_led = 10 * (np.exp(-time / t_fall)\
      \ - np.exp(-time / t_rise))  # respuesta al impulso del PD\n\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 156.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, additionFlag=True):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Add or Multiply Block',   # will show up in GRC\n\
      \            in_sig=[np.complex64, np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.additionFlag\
      \ = additionFlag\n\n    def work(self, input_items, output_items):\n       \
      \ \"\"\"example: add or multiply based on flag\"\"\"\n        if self.additionFlag:\n\
      \            output_items[0][:] = input_items[0][:] + input_items[1][:]\n  \
      \      else:\n            output_items[0][:] = input_items[0][:] * input_items[1][:]\n\
      \        return len(output_items[0])\n"
    additionFlag: 'True'
    affinity: ''
    alias: Add or Multiply
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Add or Multiply Block', 'blk', [('additionFlag', 'True')], [('0',
      'complex', 1), ('1', 'complex', 1)], [('0', 'complex', 1)], 'Embedded Python
      Block example - a simple multiply const', ['additionFlag'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 212.0]
    rotation: 0
    state: true
- name: funciones
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\n\n\n\n\
      # function to calculate the d(xv,yv)\ndef dv(x1, y1, x2, y2, fv):\n\n\n\treturn\
      \ np.abs((y1 - y2) * fv[0] - (x1 - x2) * fv[1] - x2 * y1 + x1 * y2) / np.sqrt((y1\
      \ - y2) ** 2 + (x1 - x2) ** 2)\n\n\n# function to calculate the s(xv,yv)\ndef\
      \ sv(x1, y1, z1, x2, y2, z2, fv):\n    if z1 <= z2:\n        s_v = (((y1 - y2)\
      \ ** 2 + (x1 - x2) ** 2 + (fv[0] - x1) ** 2 + (fv[1] - y1) ** 2 -\n        \
      \        ((fv[0] - x2) ** 2 + (fv[1] - y2) ** 2)) / (2 * np.sqrt((y1 - y2) **\
      \ 2 + (x1 - x2) ** 2))) + z1\n    else:\n        s_v = (((y1 - y2) ** 2 + (x2\
      \ - x1) ** 2 + (fv[0] - x2) ** 2 + (fv[1] - y2) ** 2 -\n                ((fv[0]\
      \ - x1) ** 2 + (fv[1] - y1) ** 2)) / (2 * np.sqrt((y1 - y2) ** 2 + (x2 - x1)\
      \ ** 2))) + z2\n    return s_v\n\n\n# %funcion para calcular vector y distancia\
      \ entre dos puntos\ndef point_to_vector(x1, y1, z1, x2, y2, z2):\n    Vec =\
      \ np.array([x2 - x1, y2 - y1, z2 - z1])\n    length = np.sqrt((x2 - x1) ** 2\
      \ + (y2 - y1) ** 2 + (z2 - z1) ** 2)\n    \n    return Vec, length\n\n\n# Calculo\
      \ del vector normal para transmisores\ndef norm_vec_trans(alpha, beta):\n  \
      \  n = np.array([np.cos(np.deg2rad(alpha)) * np.sin(np.deg2rad(beta)),\n   \
      \               np.sin(np.deg2rad(alpha)) * np.sin(np.deg2rad(beta)),\n    \
      \              -np.cos(np.deg2rad(beta))])\n    return n\n\n# funcion para calcular\
      \ el producto punto\ndef dot_product(a, b):\n    f = np.dot(a, b)\n    return\
      \ f\n\n# Calculo del vector normal para receptores\ndef norm_vec_receiver(alpha,\
      \ beta):\n    m = np.array([np.cos(np.deg2rad(alpha)) * np.sin(np.deg2rad(beta)),\n\
      \                  np.sin(np.deg2rad(alpha)) * np.sin(np.deg2rad(beta)),\n \
      \                 np.cos(np.deg2rad(beta))])\n    return m\n\n# funcion para\
      \ calcular la ganancia\ndef gain(eta, incide, incide_r, fov):\n    if 0 <= incide_r\
      \ <= 2 * fov:\n        g = (eta ** 2) / (np.sin(np.deg2rad(incide)) ** 2)\n\
      \    else:\n        g = 0\n    return g\n\n# Function to calculate the  Pij\
      \ for shadowing model\ndef P_expt(gv, fv, W, H, X, Y, t, es, d_v, s_v):\n  \
      \  p = 0.1\n         \n    if (gv[0] >= 2 * d_v) and (gv[1] >= s_v):\n     \
      \   w_int = gv[0] * W / 2\n        h_int = gv[1] * H / 2\n        A = [w_int,\
      \ h_int]\n        x_int = fv[0] * X / 2\n        y_int = fv[1] * Y / 2\n   \
      \     B = [x_int, y_int]\n        exp_value = np.dot(A, B)\n        f = p *\
      \ t\n        est = -es * exp_value\n        d = np.exp(est)\n        Pij = d\n\
      \    else:\n        Pij = 0\n    \n    return Pij\n\n\n# funcion para calcular\
      \ el HLoS\ndef HLoS_direct(x_i, y_i, z_i, x_j, y_j, z_j, Ap, eta, alpha_i, alpha_j,\
      \ beta_i, beta_j, incidencia, incidencia_r, m, fov, gv, fv, W, H, X, Y, t, es,\
      \ c):\n    dv_ij = dv(x_i, y_i, x_j, y_j, fv)\n    sv_ij = sv(x_i, y_i, z_i,\
      \ x_j, y_j, z_j, fv)\n    Pij = P_expt(gv, fv, W, H, X, Y, t, es, dv_ij, sv_ij)\n\
      \    v1, d1 = point_to_vector(x_i, y_i, z_i, x_j, y_j, z_j)\n    Nnorm1 = norm_vec_trans(alpha_i,\
      \ beta_i)\n    p1 = dot_product(v1, Nnorm1)\n    v2, d2 = point_to_vector(x_j,\
      \ y_j, z_j, x_i, y_i, z_i)\n    Nnorm2 = norm_vec_receiver(alpha_j, beta_j)\n\
      \    p2 = dot_product(v2, Nnorm2)\n    g = gain(eta, incidencia, incidencia_r,\
      \ fov)\n    dm = d1 / c\n\n    if 0 <= incidencia <= 2 * fov:\n        m_HLoS\
      \ = abs(((m + 1) * Ap / (2 * np.pi * d1 ** 2)) * (p1 ** m / d1) * (p2 / d2)\
      \ * g * Pij)\n    else:\n        m_HLoS = 0\n\n    return m_HLoS, dm\n\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 204.0]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 12.0]
    rotation: 0
    state: true
- name: import_0_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: from cmath import exp, pi; from random import randint; import numpy as
      np; import random;
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 156.0]
    rotation: 0
    state: true
- name: import_1
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import sympy
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 204.0]
    rotation: 0
    state: true
- name: note_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: PYTHON MODULES
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 108.0]
    rotation: 0
    state: true
- name: note_1
  id: note
  parameters:
    alias: ''
    comment: ''
    note: PYTHON IMPORTS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 108.0]
    rotation: 0
    state: true
- name: note_2
  id: note
  parameters:
    alias: ''
    comment: ''
    note: GNU VARIABLES
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 108.0]
    rotation: 0
    state: true
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 396.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 84.0]
    rotation: 0
    state: true

connections:
- [analog_sig_source_x_0, '0', epy_block_0, '0']
- [analog_sig_source_x_1, '0', epy_block_0, '1']
- [epy_block_0, '0', qtgui_freq_sink_x_0, '0']
- [epy_block_0, '0', qtgui_time_sink_x_0, '0']

metadata:
  file_format: 1
